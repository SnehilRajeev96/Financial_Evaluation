3.Innovation_IP Agent
Code
import requests
from bs4 import BeautifulSoup
import json

class InnovationIPAgent:
    def __init__(self, company_url, patent_registry_url):
        self.company_url = company_url
        self.patent_registry_url = patent_registry_url

    def fetch_page(self, url):
        response = requests.get(url)
        if response.status_code == 200:
            return response.text
        else:
            raise Exception(f"Failed to retrieve data from {url}: {response.status_code}")

    def extract_company_data(self, html):
        soup = BeautifulSoup(html, 'html.parser')
        data = {
            'rd_spend': float(soup.select_one('.rd-spend').text.replace('$', '').replace(',', '')),
            'total_revenue': float(soup.select_one('.total-revenue').text.replace('$', '').replace(',', '')),
            'ip_based_revenue': float(soup.select_one('.ip-based-revenue').text.replace('$', '').replace(',', '')),
        }
        return data

    def extract_patent_data(self, html):
        soup = BeautifulSoup(html, 'html.parser')
        patent_count = int(soup.select_one('.patent-count').text.strip())
        return patent_count

    def calculate_metrics(self, company_data, patent_count, industry_patent_average):
        metrics = {}
        
        # Number of Patents (relative to peers)
        metrics['patent_count'] = patent_count
        metrics['patent_relative_score'] = (patent_count / industry_patent_average) * 100

        # R&D Spend as % of Revenue
        metrics['rd_spend_percentage'] = (company_data['rd_spend'] / company_data['total_revenue']) * 100

        # Proprietary Tools/Platforms (Productization Level)
        metrics['productization_level'] = (company_data['ip_based_revenue'] / company_data['total_revenue']) * 100

        return metrics

    def run(self, industry_patent_average):
        try:
            company_html = self.fetch_page(self.company_url)
            patent_html = self.fetch_page(self.patent_registry_url)

            company_data = self.extract_company_data(company_html)
            patent_count = self.extract_patent_data(patent_html)

            metrics = self.calculate_metrics(company_data, patent_count, industry_patent_average)
            return metrics

        except Exception as e:
            print(f"Error running Innovation/IP Agent: {e}")
            return None

# Example usage
if __name__ == "__main__":
    company_url = "https://example.com/company/innovation"
    patent_registry_url = "https://patents.example.com/company-patents"
    industry_patent_average = 25  # Example industry average for patents

    agent = InnovationIPAgent(company_url, patent_registry_url)
    innovation_metrics = agent.run(industry_patent_average)

    if innovation_metrics:
        print(json.dumps(innovation_metrics, indent=4))
