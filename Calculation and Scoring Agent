7.Calculation and Scoring Agent
Code
import json
class CalculationScoringAgent:
    def __init__(self, aggregated_data):
        self.data = aggregated_data

    def score_range(self, value, ranges):
        for score, (low, high) in ranges.items():
            if low <= value < high:
                return score
        return max(ranges.keys())  # Default to highest score if value exceeds all ranges

    def calculate_scores(self):
        scores = {}
        weights = {
            'financial': 40,
            'market': 20,
            'innovation': 15,
            'competitive_edge': 15,
            'esg_compliance': 10
        }

        # --- Financial Performance Scoring ---
        fin = self.data['financial_data']
        scores['revenue_growth'] = self.score_range(fin['revenue_growth_rate'], {
            1: (0, 10), 2: (10, 20), 3: (20, 30), 4: (30, 40), 5: (40, float('inf'))
        })
        scores['ebitda_margin'] = self.score_range(fin['ebitda_margin'], {
            1: (0, 10), 2: (10, 20), 3: (20, 25), 4: (25, 30), 5: (30, float('inf'))
        })
        scores['net_profit_margin'] = self.score_range(fin['net_profit_margin'], {
            1: (0, 5), 2: (5, 10), 3: (10, 15), 4: (15, 20), 5: (20, float('inf'))
        })

        # --- Market Position Scoring ---
        market = self.data['market_intelligence']
        scores['market_share'] = self.score_range(market['global_market_share'], {
            1: (0, 2), 2: (2, 5), 3: (5, 10), 4: (10, 15), 5: (15, float('inf'))
        })
        scores['regional_growth'] = self.score_range(market['regional_growth'], {
            1: (0, 10), 2: (10, 15), 3: (15, 20), 4: (20, 30), 5: (30, float('inf'))
        })

        # --- Innovation Scoring ---
        innovation = self.data['innovation_data']
        scores['rd_spend'] = self.score_range(innovation['rd_spend_percentage'], {
            1: (0, 1), 2: (1, 3), 3: (3, 5), 4: (5, 10), 5: (10, float('inf'))
        })
        scores['productization'] = self.score_range(innovation['productization_level'], {
            1: (0, 5), 2: (5, 10), 3: (10, 15), 4: (15, 20), 5: (20, float('inf'))
        })

        # --- Competitive Edge Scoring ---
        ce = self.data['competitive_edge']
        scores['niche_capabilities'] = self.score_range(ce['niche_capabilities_percentage'], {
            1: (0, 10), 2: (10, 20), 3: (20, 25), 4: (25, 30), 5: (30, float('inf'))
        })
        scores['partnerships'] = self.score_range(ce['strategic_partnerships'], {
            1: (0, 2), 2: (2, 4), 3: (4, 6), 4: (6, 10), 5: (10, float('inf'))
        })

        # --- ESG & Compliance Scoring ---
        esg = self.data['esg_compliance']
        scores['dei'] = self.score_range(esg['dei_leadership_percentage'], {
            1: (0, 10), 2: (10, 20), 3: (20, 30), 4: (30, 40), 5: (40, float('inf'))
        })
        scores['compliance'] = 5 if esg['gdpr_compliant'] and esg['iso_compliant'] else 3

        return scores

    def compute_final_score(self, scores):
        weighted_scores = {
            'financial': (scores['revenue_growth'] + scores['ebitda_margin'] + scores['net_profit_margin']) / 3,
            'market': (scores['market_share'] + scores['regional_growth']) / 2,
            'innovation': (scores['rd_spend'] + scores['productization']) / 2,
            'competitive_edge': (scores['niche_capabilities'] + scores['partnerships']) / 2,
            'esg_compliance': (scores['dei'] + scores['compliance']) / 2
        }

        final_score = sum(weighted_scores[key] * weight for key, weight in {
            'financial': 0.40,
            'market': 0.20,
            'innovation': 0.15,
            'competitive_edge': 0.15,
            'esg_compliance': 0.10
        }.items())

        return round(final_score, 2)

    def run(self):
        scores = self.calculate_scores()
        final_score = self.compute_final_score(scores)
        return {
            'parameter_scores': scores,
            'final_weighted_score': final_score
        }

# Example usage
if __name__ == "__main__":
    with open('aggregated_results.json') as f:
        aggregated_data = json.load(f)

    agent = CalculationScoringAgent(aggregated_data)
    result = agent.run()
    print(json.dumps(result, indent=4))
